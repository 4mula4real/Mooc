0
00:00:00,000 --> 00:00:00,780


1
00:00:00,780 --> 00:00:03,870
Welcome to the first R tutorial video,

2
00:00:03,870 --> 00:00:06,210
where we'll go over some of the basics of working

3
00:00:06,210 --> 00:00:09,930
with the programming language R. The video will provide

4
00:00:09,930 --> 00:00:13,620
a general orientation to the RStudio workspace,

5
00:00:13,620 --> 00:00:16,960
how to set up your working directory, how to import a data

6
00:00:16,960 --> 00:00:20,760
set and provide a few tips for coding in R.

7
00:00:20,760 --> 00:00:23,040
So if you've never used R before,

8
00:00:23,040 --> 00:00:26,230
this should be a helpful place to start.

9
00:00:26,230 --> 00:00:29,090
So let's start by looking at the four different windows

10
00:00:29,090 --> 00:00:32,040
inside the RStudio workspace.

11
00:00:32,040 --> 00:00:35,100
In the bottom-left window is the console.

12
00:00:35,100 --> 00:00:37,470
This is like the command prompt window,

13
00:00:37,470 --> 00:00:40,960
where you can enter commands to tell R to do something.

14
00:00:40,960 --> 00:00:47,070
For example, I can enter a math command like 2 + 2, hit Enter,

15
00:00:47,070 --> 00:00:53,580
and I get back a single element of output, in this case, 4.

16
00:00:53,580 --> 00:01:00,630
I could also enter rep 1, comma, 100, inside brackets,

17
00:01:00,630 --> 00:01:05,010
hit Enter, and this time, R gives me back

18
00:01:05,010 --> 00:01:12,840
a vector of length 100, which is just 1 repeated 100 times.

19
00:01:12,840 --> 00:01:17,320
On the top-left window is what we call the R script.

20
00:01:17,320 --> 00:01:18,990
This is like a scratch pad where you

21
00:01:18,990 --> 00:01:20,880
can write your commands without actually

22
00:01:20,880 --> 00:01:23,400
having to run them right away.

23
00:01:23,400 --> 00:01:26,640
This is nice, because you can save your progress on a script

24
00:01:26,640 --> 00:01:29,190
and pick up later where you left off.

25
00:01:29,190 --> 00:01:32,640
As you can see, I premade a script here,

26
00:01:32,640 --> 00:01:34,410
which contains a few commands that we'll

27
00:01:34,410 --> 00:01:35,715
go over in this video.

28
00:01:35,715 --> 00:01:38,800


29
00:01:38,800 --> 00:01:40,770
So if you have a line of code in the script,

30
00:01:40,770 --> 00:01:43,230
you can execute this command directly.

31
00:01:43,230 --> 00:01:46,410
Just move your cursor to the script line,

32
00:01:46,410 --> 00:01:50,270
and then click on the Run button.

33
00:01:50,270 --> 00:01:52,115
You can also select multiple lines of code

34
00:01:52,115 --> 00:01:52,990
and run them at once.

35
00:01:52,990 --> 00:01:57,660


36
00:01:57,660 --> 00:02:00,870
Alternatively, I could just click the code that I want

37
00:02:00,870 --> 00:02:05,310
and hit Control-R to run the command.

38
00:02:05,310 --> 00:02:07,500
If I want to save my script, I can just

39
00:02:07,500 --> 00:02:10,855
go to the File dropdown menu and click on Save.

40
00:02:10,855 --> 00:02:13,610


41
00:02:13,610 --> 00:02:16,530
On the upper-right window, we normally

42
00:02:16,530 --> 00:02:19,280
see what's called the environment.

43
00:02:19,280 --> 00:02:22,650
This window tells us all the various data sets, functions,

44
00:02:22,650 --> 00:02:26,650
or other objects that are currently in your work session.

45
00:02:26,650 --> 00:02:29,790
For example, we could create a sequence of numbers

46
00:02:29,790 --> 00:02:33,810
from 0 to 50 by intervals of 2 and store

47
00:02:33,810 --> 00:02:35,760
this as a vector object.

48
00:02:35,760 --> 00:02:41,530


49
00:02:41,530 --> 00:02:44,110
We can see our new vector just by entering

50
00:02:44,110 --> 00:02:48,790
the name of the object, and we see

51
00:02:48,790 --> 00:02:54,370
it appear in the top-right environment window.

52
00:02:54,370 --> 00:02:56,310
Finally, in the bottom right, there's

53
00:02:56,310 --> 00:02:59,130
a miscellaneous window that usually displays

54
00:02:59,130 --> 00:03:02,040
any visual outputs that come from our commands

55
00:03:02,040 --> 00:03:04,240
or show us help files.

56
00:03:04,240 --> 00:03:07,530
For example, I can create a very simple visual output

57
00:03:07,530 --> 00:03:10,440
by plotting my_object, the string of numbers

58
00:03:10,440 --> 00:03:12,190
that I just created.

59
00:03:12,190 --> 00:03:16,740
To do this, I'll just enter plot(my_object) and run

60
00:03:16,740 --> 00:03:20,430
this code, and we see that R makes

61
00:03:20,430 --> 00:03:23,070
a nice little graphic for us and displays it

62
00:03:23,070 --> 00:03:28,060
in the bottom-right window

63
00:03:28,060 --> 00:03:31,060
OK, so now that we have some basic orientation

64
00:03:31,060 --> 00:03:35,260
around the RStudio workspace, one of the first things

65
00:03:35,260 --> 00:03:37,540
you'll always want to do after opening our

66
00:03:37,540 --> 00:03:39,280
is make sure that you're working in

67
00:03:39,280 --> 00:03:41,560
the correct working directory.

68
00:03:41,560 --> 00:03:43,330
The working directory is basically

69
00:03:43,330 --> 00:03:45,280
the location on your computer where

70
00:03:45,280 --> 00:03:48,250
R is looking while you're running the program.

71
00:03:48,250 --> 00:03:51,570
If you tell R to load any files or data sets,

72
00:03:51,570 --> 00:03:54,880
you can only do this if you tell R where to look.

73
00:03:54,880 --> 00:03:57,200
Similarly, if you save something in R,

74
00:03:57,200 --> 00:03:59,830
like a script or a graphic, it will normally

75
00:03:59,830 --> 00:04:03,650
be saved to the current working directory.

76
00:04:03,650 --> 00:04:06,340
So to find out what my current working directory is,

77
00:04:06,340 --> 00:04:11,997
I can enter getwd with curly brackets

78
00:04:11,997 --> 00:04:13,080
and run this line of code.

79
00:04:13,080 --> 00:04:15,680


80
00:04:15,680 --> 00:04:18,980
In the console, we can see that the output

81
00:04:18,980 --> 00:04:24,030
is a file pathway to the current working directory.

82
00:04:24,030 --> 00:04:26,100
If I'm happy working from this folder,

83
00:04:26,100 --> 00:04:29,290
I can just leave this alone and move on.

84
00:04:29,290 --> 00:04:31,680
But if I want to change my working directory,

85
00:04:31,680 --> 00:04:37,190
then I can use the command setwd and enter the new file

86
00:04:37,190 --> 00:04:43,020
pathway inside the brackets.

87
00:04:43,020 --> 00:04:45,990
One note about changing your working directory--

88
00:04:45,990 --> 00:04:49,560
always make sure that the slashes in your file pathway

89
00:04:49,560 --> 00:04:50,380
are going forward.

90
00:04:50,380 --> 00:04:53,410


91
00:04:53,410 --> 00:04:59,180
Also, that the pathway is inside quotation marks.

92
00:04:59,180 --> 00:05:01,850
Sometimes, if you copy and paste a file pathway name

93
00:05:01,850 --> 00:05:05,540
from somewhere else, the slashes might be the wrong way,

94
00:05:05,540 --> 00:05:08,020
and R will not be happy.

95
00:05:08,020 --> 00:05:11,080
For example, in this file pathway,

96
00:05:11,080 --> 00:05:13,210
my slashes are going the wrong way.

97
00:05:13,210 --> 00:05:16,970
And if I tried to run this, I get an error message.

98
00:05:16,970 --> 00:05:21,170


99
00:05:21,170 --> 00:05:24,070
So now that you've loaded up R and gotten your working

100
00:05:24,070 --> 00:05:27,190
directory sorted out, the next thing you might want to do

101
00:05:27,190 --> 00:05:30,390
is load some data.

102
00:05:30,390 --> 00:05:32,220
There are a lot of different types

103
00:05:32,220 --> 00:05:36,000
of data that R can load for you, including files normally used

104
00:05:36,000 --> 00:05:42,630
in other data analysis programs like Excel, Stata, or SPSS.

105
00:05:42,630 --> 00:05:44,460
Sometimes depending on the version of our

106
00:05:44,460 --> 00:05:46,080
that you're working with you might

107
00:05:46,080 --> 00:05:49,380
have to load a specific package in R that will allow you

108
00:05:49,380 --> 00:05:51,830
to read the data more easily.

109
00:05:51,830 --> 00:05:56,510
Packages are basically bundles of commands or code

110
00:05:56,510 --> 00:06:00,080
that people have made that allow R to do various tasks more

111
00:06:00,080 --> 00:06:01,070
easily.

112
00:06:01,070 --> 00:06:03,830
R comes with a standard set of packages,

113
00:06:03,830 --> 00:06:06,920
but sometimes you'll need to install new packages, depending

114
00:06:06,920 --> 00:06:08,720
what you're trying to do.

115
00:06:08,720 --> 00:06:10,400
You can always use Google searches

116
00:06:10,400 --> 00:06:15,800
to figure out which package you need for the task at hand.

117
00:06:15,800 --> 00:06:17,530
So let's start with two common types

118
00:06:17,530 --> 00:06:23,050
of data sets, Excel files and CSV, or Comma-Separated Value

119
00:06:23,050 --> 00:06:25,310
files.

120
00:06:25,310 --> 00:06:27,770
If I know that the data set I want to load is saved

121
00:06:27,770 --> 00:06:30,920
as an Excel spreadsheet, I can read this data set directly

122
00:06:30,920 --> 00:06:35,140
into R using the readxl package. .

123
00:06:35,140 --> 00:06:41,400
So first I'll enter the command install_packages, and then

124
00:06:41,400 --> 00:06:45,480
type readxl inside the quotation marks.

125
00:06:45,480 --> 00:06:48,110
After running this, the package will

126
00:06:48,110 --> 00:06:50,510
be downloaded and installed, and then I

127
00:06:50,510 --> 00:06:59,080
can use the library command to load the package in R.

128
00:06:59,080 --> 00:07:03,190
So now I'm ready to load my Excel data set.

129
00:07:03,190 --> 00:07:05,380
So now, in this next line of code,

130
00:07:05,380 --> 00:07:11,050
I'm using the command read_excel to read in the data set.

131
00:07:11,050 --> 00:07:13,690
The arrow here is assigning this data

132
00:07:13,690 --> 00:07:16,870
set to a new object in the workspace,

133
00:07:16,870 --> 00:07:22,500
and the object is called my_exceldata.

134
00:07:22,500 --> 00:07:27,970
So running this code, I see that my data set appears

135
00:07:27,970 --> 00:07:30,010
in the environment window.

136
00:07:30,010 --> 00:07:32,470
I can now click on this to look at it

137
00:07:32,470 --> 00:07:34,630
and see that my data set has loaded correctly.

138
00:07:34,630 --> 00:07:37,170


139
00:07:37,170 --> 00:07:40,980
So I see that my data set of just two variables and three

140
00:07:40,980 --> 00:07:45,780
observations has loaded correctly.

141
00:07:45,780 --> 00:07:48,090
Now, another way to load data in R

142
00:07:48,090 --> 00:07:52,320
is to click on Import Data Set, and then

143
00:07:52,320 --> 00:07:54,240
select From Text File--

144
00:07:54,240 --> 00:07:58,070
or sometimes, this might appear as From Excel or From CSV.

145
00:07:58,070 --> 00:08:01,560


146
00:08:01,560 --> 00:08:03,950
So loading CSV files is similar.

147
00:08:03,950 --> 00:08:09,290
This time, I'll use the read_csv command to read in my data.

148
00:08:09,290 --> 00:08:12,190


149
00:08:12,190 --> 00:08:16,720
So we see that a new data set appears.

150
00:08:16,720 --> 00:08:20,290
I can click on it once again and see now,

151
00:08:20,290 --> 00:08:23,650
I've loaded a second data set, this one with three variables.

152
00:08:23,650 --> 00:08:29,070


153
00:08:29,070 --> 00:08:32,940
Other types of data sets you might encounter include .dta

154
00:08:32,940 --> 00:08:38,730
files which are commonly used in Stata, and .sav files,

155
00:08:38,730 --> 00:08:42,590
which are commonly used in SPSS.

156
00:08:42,590 --> 00:08:45,550
So when loading a .dta file for the first time,

157
00:08:45,550 --> 00:08:48,200
you'll need to install and load the package Foreign.

158
00:08:48,200 --> 00:08:52,970


159
00:08:52,970 --> 00:08:58,110
And once this has been installed and loaded successfully,

160
00:08:58,110 --> 00:09:01,965
you can load the DTA file using a similar script as before.

161
00:09:01,965 --> 00:09:05,770


162
00:09:05,770 --> 00:09:09,700
So I see that my DTA file has loaded.

163
00:09:09,700 --> 00:09:12,050
I can click on it to view the data set.

164
00:09:12,050 --> 00:09:16,240


165
00:09:16,240 --> 00:09:21,460
And similarly, with .sav files, I'll need to install and load

166
00:09:21,460 --> 00:09:22,420
the package Haven.

167
00:09:22,420 --> 00:09:27,470


168
00:09:27,470 --> 00:09:30,620
And then I can read in my SPSS data.

169
00:09:30,620 --> 00:09:35,610


170
00:09:35,610 --> 00:09:44,510
Click on it once again, wait for it to load,

171
00:09:44,510 --> 00:09:47,537
and I see that my data set's loaded successfully.

172
00:09:47,537 --> 00:09:54,700


173
00:09:54,700 --> 00:09:57,300
OK, so hopefully now, you're ready to get started

174
00:09:57,300 --> 00:10:01,230
working with your data in R. To conclude a video,

175
00:10:01,230 --> 00:10:04,050
let's go over a few final tips that

176
00:10:04,050 --> 00:10:07,120
can improve your R experience.

177
00:10:07,120 --> 00:10:11,040
So first, remember that R is very picky about punctuation.

178
00:10:11,040 --> 00:10:13,590
Always check your brackets and commas in your code

179
00:10:13,590 --> 00:10:15,450
if you're getting errors.

180
00:10:15,450 --> 00:10:22,100
Remember, we generally use round brackets

181
00:10:22,100 --> 00:10:24,800
to specify arguments inside a command,

182
00:10:24,800 --> 00:10:28,040
while we use square brackets to specify the location

183
00:10:28,040 --> 00:10:30,170
inside a data object.

184
00:10:30,170 --> 00:10:34,610
For example, I could open up the square brackets

185
00:10:34,610 --> 00:10:41,690
and put 1 inside here, and this would tell me the first element

186
00:10:41,690 --> 00:10:45,300
of the vector of my object.

187
00:10:45,300 --> 00:10:48,810
If I have a 2 inside the square block brackets,

188
00:10:48,810 --> 00:10:51,400
it'll tell me the second element.

189
00:10:51,400 --> 00:10:54,240
And if I have a 3, it'll give me the third element.

190
00:10:54,240 --> 00:10:59,320


191
00:10:59,320 --> 00:11:02,560
Second, always try to comment your code and label

192
00:11:02,560 --> 00:11:05,900
things in a logical way.

193
00:11:05,900 --> 00:11:08,060
That way, both you and others can understand

194
00:11:08,060 --> 00:11:09,650
what your code is doing.

195
00:11:09,650 --> 00:11:11,930
For example, in the script I've just created,

196
00:11:11,930 --> 00:11:15,200
I'm using these pound characters to create

197
00:11:15,200 --> 00:11:19,145
comment code that explains each piece of my script.

198
00:11:19,145 --> 00:11:23,520


199
00:11:23,520 --> 00:11:25,950
Finally, when you use a new command or a function

200
00:11:25,950 --> 00:11:28,740
for the first time, something that's helpful to do

201
00:11:28,740 --> 00:11:32,310
is to check out the help file and try a working example

202
00:11:32,310 --> 00:11:35,340
so that you understand what the code is doing.

203
00:11:35,340 --> 00:11:39,030
For example, to see the help file for the sample command,

204
00:11:39,030 --> 00:11:45,600
I can just type ?sample and run this.

205
00:11:45,600 --> 00:11:48,830
So this loads the help file for the sample command,

206
00:11:48,830 --> 00:11:51,260
and I can read through this documentation

207
00:11:51,260 --> 00:11:54,270
to see which arguments go into it.

208
00:11:54,270 --> 00:11:56,980
And if I scroll down to the bottom,

209
00:11:56,980 --> 00:12:00,790
there's code for some working examples.

210
00:12:00,790 --> 00:12:04,800
So if we copied and pasted the code for 100 Bernoulli

211
00:12:04,800 --> 00:12:11,200
trials, which I have here, we can

212
00:12:11,200 --> 00:12:18,990
see that this code delivers 100 elements of either 0 or 1.

213
00:12:18,990 --> 00:12:24,256


